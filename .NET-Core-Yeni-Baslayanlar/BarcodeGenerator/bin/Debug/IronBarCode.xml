<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>IronBarCode</name>
    </assembly>
    <members>
        <member name="T:IronBarCode.DataMatrixWriter">
            <summary>
            A class allowing for advanced control on the generation of DataMatrix type barcodes.
            <para><see cref="T:IronBarCode.DataMatrixWriter">DataMatrixWriter</see> allows setting of the DataMatrix shape.</para><para>Generated Barcodes can be exported as Images, Bitmaps, Files, or Streams.</para></summary>
        </member>
        <member name="T:IronBarCode.DataMatrixWriter.DataMatrixShape">
            <summary>
            Enumeration for DataMatrix shape. Can specify if you would like a <seealso cref="F:IronBarCode.DataMatrixWriter.DataMatrixShape.Square" /> (equal width and height) or <seealso cref="F:IronBarCode.DataMatrixWriter.DataMatrixShape.Rectangular" />.
            </summary>
        </member>
        <member name="F:IronBarCode.DataMatrixWriter.DataMatrixShape.Automatic">
            <summary>
            Default behavior. Allows IronBarcode to decide the dimensions of the DataMatrix.
            </summary>
        </member>
        <member name="F:IronBarCode.DataMatrixWriter.DataMatrixShape.Square">
            <summary>
            Square Shape. Width and Height of the generated Datamatrix will be equal.
            </summary>
        </member>
        <member name="F:IronBarCode.DataMatrixWriter.DataMatrixShape.Rectangular">
            <summary>
            Rectangular Shape. Width and Height may be different.
            </summary>
        </member>
        <member name="M:IronBarCode.DataMatrixWriter.CreateDataMatrix(System.String,System.Int32)">
            <summary>
            Renders a Square DataMatrix from a string of data. UTF-8 fully supported. For rendering of a rectangular DataMatrix, please find another overload of this method that supports width and height.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.</para><para>See method overloads for rectangular DataMatrix shapes.</para></summary>
            <param name="Value">The value of the DataMatrix as a string. Also suitable for URLS.</param>
            <param name="Size">The width and height of the DataMatrix in pixels.</param>
            <returns>A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream.</returns>
        </member>
        <member name="M:IronBarCode.DataMatrixWriter.CreateDataMatrix(System.Byte[],System.Int32)">
            <summary>
            Renders a Square DataMatrix. For rendering of a rectangular DataMatrix, please find another overload of this method that supports width and height.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.</para><para>See method overloads for rectangular DataMatrix shapes.</para></summary>
            <param name="BinaryData">The value of the DataMatrix as a byte array.</param>
            <param name="Size">The width and height of the DataMatrix in pixels.</param>
            <returns>A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream.</returns>
        </member>
        <member name="M:IronBarCode.DataMatrixWriter.CreateDataMatrix(System.IO.Stream,System.Int32)">
            <summary>
            Renders a Square DataMatrix. For rendering of a rectangular DataMatrix, please find another overload of this method that supports width and height.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.</para><para>See method overloads for rectangular DataMatrix shapes.</para></summary>
            <param name="BinaryDataStream">The value of the DataMatrix as a stream.</param>
            <param name="Size">The width and height of the DataMatrix in pixels.</param>
            <returns>A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream.</returns>
        </member>
        <member name="M:IronBarCode.DataMatrixWriter.CreateDataMatrix(System.String,IronBarCode.DataMatrixWriter.DataMatrixShape,System.Int32,System.Int32)">
            <summary>
            Renders a DataMatrix from a String of data. UTF-8 fully supported.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.</para></summary>
            <param name="Value">The value of the DataMatrix as a string. Also suitable for URLS.</param>
            <param name="Shape">The shape of the DataMatrix.</param>
            <param name="Width">The width of the DataMatrix in pixels.</param>
            <param name="Height">The height of the DataMatrix in pixels.</param>
            <returns>A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream.</returns>
        </member>
        <member name="M:IronBarCode.DataMatrixWriter.CreateDataMatrix(System.Byte[],IronBarCode.DataMatrixWriter.DataMatrixShape,System.Int32,System.Int32)">
            <summary>
            Renders a DataMatrix.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.</para></summary>
            <param name="BinaryData">The value of the DataMatrix as a byte array.</param>
            <param name="Shape">The shape of the DataMatrix.</param>
            <param name="Width">The width of the DataMatrix in pixels.</param>
            <param name="Height">The height of the DataMatrix in pixels.</param>
            <returns>A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream.</returns>
        </member>
        <member name="M:IronBarCode.DataMatrixWriter.CreateDataMatrix(System.IO.Stream,IronBarCode.DataMatrixWriter.DataMatrixShape,System.Int32,System.Int32)">
            <summary>
            Renders a DataMatrix.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.</para></summary>
            <param name="BinaryDataStream">The value of the DataMatrix as a stream.</param>
            <param name="Shape">The shape of the DataMatrix.</param>
            <param name="Width">The width of the DataMatrix in pixels.</param>
            <param name="Height">The height of the DataMatrix in pixels.</param>
            <returns>A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream.</returns>
        </member>
        <member name="T:IronBarCode.QRCodeWriter">
            <summary>
             A class allowing for advanced control on the generation of QR type barcodes.
            <para><see cref="T:IronBarCode.QRCodeWriter">QRCodeWriter</see> gives the developer access to set QR code error correction levels, and to add logo images to QR codes.</para><para>Generated Barcodes can be exported as Images, Bitmaps, Files and Streams.</para></summary>
            <summary>
             A class allowing for advanced control on the generation of QR type barcodes.
            <para><see cref="T:IronBarCode.QRCodeWriter">QRCodeWriter</see> gives the developer access to set QR code error correction levels, and to add logo images to QR codes.</para><para>Generated Barcodes can be exported as Images, Bitmaps, Files and Streams.</para></summary>
        </member>
        <member name="T:IronBarCode.QRCodeWriter.QrErrorCorrectionLevel">
            <summary>
            The ErrorCorrection or fault tolerance level of a QR code.  A higher <see cref="T:IronBarCode.QRCodeWriter.QrErrorCorrectionLevel" /> create more complex QR codes, which are less prone to reading errors.  They may also be readable if damaged or partially obscured.
            <para>Please also see http://www.qrcode.com/en/about/error_correction.html</para></summary>
        </member>
        <member name="F:IronBarCode.QRCodeWriter.QrErrorCorrectionLevel.Low">
            <summary>
            QR Code error correction Level L.   Approx 7% of QR data is error correction.
            </summary>
        </member>
        <member name="F:IronBarCode.QRCodeWriter.QrErrorCorrectionLevel.Medium">
            <summary>
            QR Code error correction Level M.   Approx 15% of QR data is error correction.
            </summary>
        </member>
        <member name="F:IronBarCode.QRCodeWriter.QrErrorCorrectionLevel.High">
            <summary>
            QR Code error correction Level Q.   Approx 25% of QR data is error correction.
            </summary>
        </member>
        <member name="F:IronBarCode.QRCodeWriter.QrErrorCorrectionLevel.Highest">
            <summary>
            QR Code error correction Level H.   Approx 30% of QR data is error correction.
            <para>Level H allows sufficient capacity for logo images or graphics to be stamped into QR codes. </para></summary>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateBarcode(System.String,System.Int32,IronBarCode.QRCodeWriter.QrErrorCorrectionLevel,System.Int32)">
            <summary>
             Synonym for IronBarCode.GeneratedBarcode.CreateQrCode
            </summary>
            <param name="Value">The value of the QR code as a string.  Also suitable for URLS.</param>
            <param name="ErrorCorrection">The error correction level of the QR code.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatically assign an appropriate QrVersion for your data (highly recommended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="!:IronBarCode.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.</returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCode(System.String,System.Int32,IronBarCode.QRCodeWriter.QrErrorCorrectionLevel,System.Int32)">
            <summary>
             Renders a QR code from a String of data.  UTF-8 fully supported.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.  Logos / Branding may also be added.</para></summary>
            <param name="Value">The value of the QR code as a string.  Also suitable for URLS.</param>
            <param name="ErrorCorrection">The error correction level of the QR code.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatticaly assign an appropriate QrVersion for your data (highly reccomended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="!:IronBarCode.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.</returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCode(System.Byte[],System.Int32,IronBarCode.QRCodeWriter.QrErrorCorrectionLevel,System.Int32)">
            <summary>
            Renders a QR code.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.   Logos &amp; Branding may also be added using the CreateQrCodeWithLogo method.</para></summary>
            <param name="BinaryData">The value of the QR code as a byte array.</param>
            <param name="ErrorCorrection">The error correction level of the QR code.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatticaly assign an appropriate QrVersion for your data (highly reccomended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="!:IronBarCode.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCode(System.IO.Stream,System.Int32,IronBarCode.QRCodeWriter.QrErrorCorrectionLevel,System.Int32)">
            <summary>
            Renders a QR code.
            <para>Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized.  Logos &amp; Branding may also be added using the CreateQrCodeWithLogo method.</para></summary>
            <param name="BinaryDataStream">The value of the QR code as a stream.</param>
            <param name="ErrorCorrection">The error correction level of the QR code.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatticaly assign an appropriate QrVersion for your data (highly reccomended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="!:IronBarCode.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogo(System.String,IronBarCode.QRCodeLogo,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="Value">The value of the QR code as a string.  Also suitable for URLS.</param>
            <param name="QRCodeLogo">A <see cref="T:IronBarCode.QRCodeLogo" /> class instance representing your desired logo image settings.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatticaly assign an appropriate QrVersion for your data (highly reccomended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="!:IronBarCode.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogo(System.Byte[],IronBarCode.QRCodeLogo,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="BinaryData">The value of the QR code as a byte array.</param>
            <param name="QRCodeLogo">A <see cref="T:IronBarCode.QRCodeLogo" /> class instance representing your desired logo image settings.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatticaly assign an appropriate QrVersion for your data (highly reccomended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="!:IronBarCode.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogo(System.IO.Stream,IronBarCode.QRCodeLogo,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="BinaryDataStream">The value of the QR code as a stream.</param>
            <param name="QRCodeLogo">A <see cref="T:IronBarCode.QRCodeLogo" /> class instance representing your desired logo image settings.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatticaly assign an appropriate QrVersion for your data (highly reccomended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="!:IronBarCode.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogo(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="Value">The value of the QR code as a string.  Also suitable for URLS.</param>
            <param name="LogoFilePath">The file path to the logo image.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatically assign an appropriate QrVersion for your data (highly recommended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="T:IronBarCode.Exceptions.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogo(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="BinaryData">The value of the QR code as a byte array.</param>
            <param name="LogoFilePath">The file path to the logo image.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatically assign an appropriate QrVersion for your data (highly recommended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="T:IronBarCode.Exceptions.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogo(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="BinaryDataStream">The value of the QR code as a stream.</param>
            <param name="LogoFilePath">The file path to the logo image.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatically assign an appropriate QrVersion for your data (highly recommended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="T:IronBarCode.Exceptions.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogoImage(System.String,IronSoftware.Drawing.AnyBitmap,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="Value">The value of the QR code as a string.  Also suitable for URLS.</param>
            <param name="LogoImage">The logo image as a IronSoftware.Drawing.AnyBitmap.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatically assign an appropriate QrVersion for your data (highly recommended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="T:IronBarCode.Exceptions.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogoImage(System.Byte[],IronSoftware.Drawing.AnyBitmap,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="BinaryData">The value of the QR code as a byte array.</param>
            <param name="LogoImage">The logo image as a IronSoftware.Drawing.AnyBitmap.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatically assign an appropriate QrVersion for your data (highly recommended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="T:IronBarCode.Exceptions.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.QRCodeWriter.CreateQrCodeWithLogoImage(System.IO.Stream,IronSoftware.Drawing.AnyBitmap,System.Int32,System.Int32)">
            <summary>
            Renders a QR code of given dimensions with a logo image at its center.
            </summary>
            <param name="BinaryDataStream">The value of the QR code as a stream.</param>
            <param name="LogoImage">The logo image as a IronSoftware.Drawing.AnyBitmap.</param>
            <param name="Size">The width and height of the QR code in pixels.</param>
            <param name="QrVersion">The symbol version of the QR Code from 1-40.  The default value 0 will automatically assign an appropriate QrVersion for your data (highly recommended). <para> Higher QrVersion numbers generate a more complex graphic and can encode more data.  Lower QrVersion numbers generate simpler QR codes that may be more readable at a distance.  If you decide to set a very low QrVersion, you may experience an <see cref="T:IronBarCode.Exceptions.IronBarCodeEncodingException" /> if the size of data you are encoding exceeds the limits of that symbol version. </para><para>Please read https://www.qrcode.com/en/about/version.html </para></param>
            <returns>
            A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="T:IronBarCode.BarcodeReader">
            <summary>
            A versatile static class for reading many popular barcode formats from Images and PDFs.
            <para>IronBarCode.BarcodeReader supports barcode reading from Bitmaps, Image Objects, Image Files, Image Streams, MultiFrame Tiff Images and also PDFs.</para><para>Features: Crop-area support, Image filters, and preprocessing for improved accuracy including and the ability to automatically un-rotate, deskew and clean barcode image input.</para></summary>
            <summary>
            A versatile static class for reading many popular barcode formats from Images and PDFs
            <para>IronBarCode.BarcodeReader supports barcode reading from Bitmaps, Image Objects, Image Files, Image Streams, MultiFrame Tiff Images and also PDFs.</para><para>Features: Crop-area support, Image filters and preprocessing for improved accuracy including and the ability to automatically un-rotate, deskew and clean barcode image input.</para></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(System.String,IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para>Overloads of this method accept InputImage as <see cref="T:System.String" /> file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.String" /> file path to an image or PDF. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(IronSoftware.Drawing.AnyBitmap,IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para>Overloads of this method accept InputImage as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> as well as <see cref="T:System.String" /> file paths, array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(System.IO.Stream,IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para>Overloads of this method accept InputImage as <see cref="T:System.IO.Stream" /> as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, array of <see cref="T:System.Byte" /> and <see cref="T:System.String" /> file paths types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(System.Byte[],IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para>Overloads of this method accept InputImage as array of <see cref="T:System.Byte" /> as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, string file paths and <see cref="T:System.IO.Stream" /> types.</para><param name="InputImage">IEnumerable of Binary data of Image as a <see cref="T:System.Byte" /> array. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param><param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior.</param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images.
            <para>Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept InputImage as IEnumerable of <see cref="T:System.String" /> file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>An Array of <see cref="T:IronBarCode.PagedBarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(System.Collections.Generic.IEnumerable{System.String},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images.
            <para>Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept InputImage as IEnumerable of <see cref="T:System.String" /> file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of string file paths. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(System.Collections.Generic.IEnumerable{System.IO.Stream},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images.
            <para>Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept InputImage as IEnumerable of <see cref="T:System.IO.Stream" /> as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, array of <see cref="T:System.Byte" /> and <see cref="T:System.String" /> file paths types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:System.IO.Stream" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.Read(System.Collections.Generic.IEnumerable{System.Byte[]},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images.
            <para>Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.</para><para>Overloads of this method accept InputImage as IEnumerable of array of <see cref="T:System.Byte" /> as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, string file paths and <see cref="T:System.IO.Stream" /> types.</para><param name="InputImage">IEnumerable of Binary data of Image as a <see cref="T:System.Byte" /> array. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param><param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(IronSoftware.Drawing.AnyBitmap,IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads a barcode from an image.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para></summary>
            <param name="InputImage">The input image as an <see cref="T:IronSoftware.Drawing.AnyBitmap" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images in parallel. Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(System.String,IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads a barcode from an image
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para></summary>
            <param name="InputImage">The input image file paths. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(System.Collections.Generic.IEnumerable{System.String},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images in parallel. Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept InputImage as IEnumerable of <see cref="T:System.String" /> file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> , array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:System.String" /> file paths. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(System.IO.Stream,IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcode from an image
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(System.Collections.Generic.IEnumerable{System.IO.Stream},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept InputImage as IEnumerable of <see cref="T:System.IO.Stream" /> as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> , array of <see cref="T:System.Byte" /> and <see cref="T:System.String" /> file paths types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:System.IO.Stream" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(System.Byte[],IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcode from an image
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><param name="InputImage">Binary data of Image as a <see cref="T:System.Byte" /> array. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported..</param><param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAsync(System.Collections.Generic.IEnumerable{System.Byte[]},IronBarCode.BarcodeReaderOptions)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept InputImage as IEnumerable of array of <see cref="T:System.Byte" /> as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, string file paths and <see cref="T:System.IO.Stream" /> types.</para><param name="InputImages">IEnumerable of Binary data of Image as a <see cref="T:System.Byte" /> array. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported..</param><param name="BarcodeReaderOptions">An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdf(System.Byte[],IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as array of <see cref="T:System.Byte" /> as well as <see cref="T:System.String" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfData">Binary data of PDF document as a <see cref="T:System.Byte" /> array.</param>
            <param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdf(System.String,IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as <see cref="T:System.String" /> file paths as well as array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPath">
                <see cref="T:System.String" /> file path to a PDF document.</param>
            <param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdf(System.IO.Stream,IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as <see cref="T:System.IO.Stream" /> as well as array of <see cref="T:System.Byte" /> and <see cref="T:System.String" /> file paths types.</para></summary>
            <param name="PdfStream">Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param>
            <returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdf(System.Collections.Generic.IEnumerable{System.Byte[]},IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as IEnumerable of array of <see cref="T:System.Byte" /> as well as <see cref="T:System.String" /> and <see cref="T:System.IO.Stream" /> types.</para><param name="PdfDatas">An enumerable of Binary data of PDF document as a <see cref="T:System.Byte" /> array.</param><param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdf(System.Collections.Generic.IEnumerable{System.String},IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as IEnumerable of <see cref="T:System.String" /> file paths as well as array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para><param name="PdfPaths">An enumerable of <see cref="T:System.String" /> file path to a PDF document.</param><param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdf(System.Collections.Generic.IEnumerable{System.IO.Stream},IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as IEnumerable of <see cref="T:System.IO.Stream" /> as well as array of <see cref="T:System.Byte" /> and <see cref="T:System.String" /> file paths types.</para><param name="PdfStreams">An enumerable of Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param><param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdfAsync(System.Collections.Generic.IEnumerable{System.Byte[]},IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as IEnumerable of array of <see cref="T:System.Byte" /> as well as <see cref="T:System.String" /> and <see cref="T:System.IO.Stream" /> types.</para><param name="PdfDatas">An enumerable of Binary data of PDF document as a <see cref="T:System.Byte" /> array.</param><param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdfAsync(System.Collections.Generic.IEnumerable{System.String},IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as IEnumerable of <see cref="T:System.String" /> file paths as well as array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" /> types.</para><param name="PdfPaths">An enumerable of string file path to a PDF document.</param><param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadPdfAsync(System.Collections.Generic.IEnumerable{System.IO.Stream},IronBarCode.PdfBarcodeReaderOptions)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Overloads of this method accept PdfData as IEnumerable of <see cref="T:System.IO.Stream" /> as well as array of <see cref="T:System.Byte" /> and <see cref="T:System.String" /> file paths types.</para><param name="PdfStreams">An enumerable of Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param><param name="PdfBarcodeReaderOptions">An Options class of PdfBarcodeReader for reading barcode from pdf. </param><returns>A <see cref="T:IronBarCode.BarcodeResults" />.</returns></summary>
        </member>
        <member name="T:IronBarCode.BarcodeReader.BarcodeImageCorrection">
            <summary>
            An enum defining strategies for cleaning pixels in noisy input documents such as scans and photographs.   In essence BarcodeImageCorrection helps separate dark barcode pixels from background patterns in images automatically.
            <para>Aggressive BarcodeImageCorrection is not always better.   BarcodeImageCorrection will take longer to perform (use more CPU cycles).  We recommend experimenting with different levels of BarcodeImageCorrection starting with the lowest settings first and gradually working up from there.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeImageCorrection.None">
            <summary>
            Default.  Barcode images are not preprocessed.  Fastest.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeImageCorrection.LightlyCleanPixels">
            <summary>
            Barcode pixels area lightly filtered to remove light pixels and pixels of very distinctly non-black color.
            <para>Pixel Thresholds are 40% dark or greater and a relative color tint of less than 50% from black</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeImageCorrection.MediumCleanPixels">
            <summary>
            Barcode pixels area filtered to remove light pixels and pixels of very distinctly non-black color
            <para>Pixel Thresholds are 60% dark or greater and a relative color tint of less than 40% from black</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeImageCorrection.DeepCleanPixels">
            <summary>
            Barcode pixels area filtered to remove all but the darkest pixels and pixels of very distinctly non-black color
            <para>Pixel Thresholds are 70% dark or greater and a relative color tint of less than 30% from black</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeImageCorrection.CleanNonBlackPixels">
            <summary>
             Barcode pixels area filtered to remove all  pixels than are at not least 80% black.
             <para>Pixel Thresholds are 80% dark or greater and a relative color tint of less than 40% from black</para></summary>
        </member>
        <member name="T:IronBarCode.BarcodeReader.BarcodeRotationCorrection">
            <summary>
            An enum defining strategies for reading barcodes that are rotated or skewed with perspective.
            <para>CPU intensive.  We recommend experimenting with different levels of BarcodeRotationCorrection starting with the lowest settings first and gradually working up from there.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeRotationCorrection.None">
            <summary>
            Barcode images will not corrected to a rotational.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeRotationCorrection.Low">
            <summary>
            Barcode images will we corrected to a rotational tolerance of 10 Degrees.  This strategy is not CPU intensive and gives faster results.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeRotationCorrection.Medium">
            <summary>
            Barcode images will we corrected to a rotational and perspective tolerance of 30 Degrees.   CPU intensive.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeRotationCorrection.High">
            <summary>
            Barcode images will we corrected to a rotational and perspective tolerance of 45 Degrees.   CPU intensive.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeReader.BarcodeRotationCorrection.Extreme">
            <summary>
            Barcode images will we corrected to a rotational and perspective tolerance of 360 Degrees (any angle).   Very CPU intensive.
            </summary>
        </member>
        <member name="M:IronBarCode.BarcodeReader.QuicklyReadOneBarcode(System.String,IronBarCode.BarcodeEncoding,System.Boolean)">
            <summary>
            Reads a single barcode from an image or PDF with automatic settings designed to be applicable to most use cases.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a string file path to an image or PDF.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported. </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for..  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="TryHarder">If set to <c>true</c> the Barcode Reader will expend more CPU cycles looking for barcodes which may be rotated or hidden in background noise in the image.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.QuicklyReadOneBarcode(IronSoftware.Drawing.AnyBitmap,IronBarCode.BarcodeEncoding,System.Boolean)">
            <summary>
            Reads a single barcode from an image with automatic settings designed to be applicable to most use cases.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported. </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.. Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="TryHarder">If set to <c>true</c> the Barcode Reader will expend more CPU cycles looking for barcodes which may be rotated or hidden in background noise in the image.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.QuicklyReadOneBarcode(System.IO.Stream,IronBarCode.BarcodeEncoding,System.Boolean)">
            <summary>
            Reads a single barcode from an image with automatic settings designed to be applicable to most use cases.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" /> containing the binary data for an image.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported. </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="TryHarder">If set to <c>true</c> the Barcode Reader will expend more CPU cycles looking for barcodes which may be rotated or hidden in background noise in the image.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.QuicklyReadAllBarcodes(System.String,IronBarCode.BarcodeEncoding,System.Boolean)">
            <summary>
            Reads any number of barcodes from an image or PDF with automatic settings designed to be applicable to most use cases.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.String" /> file path.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="TryHarder">If set to <c>true</c> the Barcode Reader will expend more CPU cycles looking for barcodes which may be rotated or hidden in background noise in the image.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.QuicklyReadAllBarcodes(System.IO.Stream,IronBarCode.BarcodeEncoding,System.Boolean)">
            <summary>
            Reads any number of barcodes from an image with automatic settings designed to be applicable to most use cases.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" /> containing the binary data for an image.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported. </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="TryHarder">If set to <c>true</c> the Barcode Reader will expend more CPU cycles looking for barcodes which may be rotated or hidden in background noise in the image.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.QuicklyReadAllBarcodes(IronSoftware.Drawing.AnyBitmap,IronBarCode.BarcodeEncoding,System.Boolean)">
            <summary>
            Reads any number of barcodes from an image or PDF with automatic settings designed to be applicable to most use cases.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" /> containing the binary data for an image.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported. </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="TryHarder">If set to <c>true</c> the Barcode Reader will expend more CPU cycles looking for barcodes which may be rotated or hidden in background noise in the image.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadASingleBarcode(System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads a single barcode from an image or PDF with granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a string file Path.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadASingleBarcode(System.IO.Stream,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads a single barcode from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadASingleBarcode(IronSoftware.Drawing.AnyBitmap,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads a single barcode from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadASingleBarcodeInCropArea(System.String,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads a single barcode from an image from a specific rectangular area within an image or PDF.  Setting a CropArea improves specificity and performance.  Features granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a string file path.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of the image in which to search. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadASingleBarcodeInCropArea(System.IO.Stream,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads a single barcode from an image from a specific rectangular area within an image.  Setting a CropArea improves specificity and performance.  Features granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of the image in which to search. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadASingleBarcodeInCropArea(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads a single barcode from an image from a specific rectangular area within an image.  Setting a CropArea improves specificity and performance.  Features granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of the image in which to search. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAllBarcodes(System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads all barcodes from an image or PDF with granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a string file path.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAllBarcodes(System.IO.Stream,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>A <see cref="T:IronBarCode.BarcodeResult" />, or <c>null</c> if no barcode was found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAllBarcodes(IronSoftware.Drawing.AnyBitmap,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAllBarcodesInCropArea(System.String,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads all barcodes from a specific rectangular area within an image or PDF.  Features granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a string file path.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of the image in which to search. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAllBarcodesInCropArea(System.IO.Stream,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads all barcodes from a specific rectangular area within an image.  Features granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:System.IO.Stream" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of the image in which to search. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadAllBarcodesInCropArea(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads all barcodes from a specific rectangular area within an image.  Features granular settings for developer control to balance performance against accuracy for their given use case.
            <para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">The input image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of the image in which to search. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreaded(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap},IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreaded(System.Collections.Generic.IEnumerable{System.String},IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of string file paths.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreaded(System.Collections.Generic.IEnumerable{System.IO.Stream},IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:System.IO.Stream" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromMultiFrameTiff(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap},IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromMultiFrameTiff(System.Collections.Generic.IEnumerable{System.String},IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of string file paths.  Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromMultiFrameTiff(System.Collections.Generic.IEnumerable{System.IO.Stream},IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:System.IO.Stream" />.  Tiff &amp; Gif Image formats are supported.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedInCropArea(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap},IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from specified crop areas within multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of each image in which to scan for barcodes. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedInCropArea(System.Collections.Generic.IEnumerable{System.String},IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from specified crop areas within multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of string file paths.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of each image in which to scan for barcodes. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedInCropArea(System.Collections.Generic.IEnumerable{System.IO.Stream},IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,System.Boolean,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from specified crop areas within multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImages">The input images as an IEnumerable of <see cref="T:System.IO.Stream" />.  Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="CropArea">The area of each image in which to scan for barcodes. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.  </param>
            <param name="BarcodeFormat">The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="ExpectMultipleBarcodePerImage">If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdf(System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPath">String file path to a PDF document.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdf(System.String,System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPath">String file path to a PDF document.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdf(System.Byte[],IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfData">Binary data of PDF document as a byte array.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdf(System.Byte[],System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfData">Binary data of PDF document as a byte array.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdf(System.IO.Stream,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStream">Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdf(System.IO.Stream,System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStream">Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPage(System.String,System.Int32,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a single page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPath">String file path to a PDF document.</param>
            <param name="PageNumber">The page number of the PDF to read.  PageNumber is '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPage(System.String,System.String,System.Int32,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a single page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPath">String file path to a PDF document.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="PageNumber">The page number of the PDF to read.  PageNumber is '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPage(System.Byte[],System.Int32,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a single page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfData">Binary data of PDF document as a byte array.</param>
            <param name="PageNumber">The page number of the PDF to read.  PageNumber is '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPage(System.Byte[],System.String,System.Int32,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a single page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfData">Binary data of PDF document as a byte array.</param>
            <param name="PageNumber">The page number of the PDF to read.  PageNumber is '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPage(System.IO.Stream,System.Int32,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a single page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStream">Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="PageNumber">The page number of the PDF to read.  PageNumber is '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPage(System.IO.Stream,System.String,System.Int32,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a single page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStream">Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="PageNumber">The page number of the PDF to read.  PageNumber is '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPages(System.String,System.Collections.Generic.IEnumerable{System.Int32},IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a range of specified page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPath">String file path to a PDF document.</param>
            <param name="PageNumbers">The page numbers of the PDF to read expressed as an Array, List or IEnumerable of <c>int</c>.  PageNumbers are '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a range of specified page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPath">String file path to a PDF document.</param>
            <param name="PageNumbers">The page numbers of the PDF to read expressed as an Array, List or IEnumerable of <c>int</c>.  PageNumbers are '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPages(System.Byte[],System.Collections.Generic.IEnumerable{System.Int32},IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a range of specified page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfData">Binary data of PDF document as a byte array.</param>
            <param name="PageNumbers">The page numbers of the PDF to read expressed as an Array, List or IEnumerable of <c>int</c>.  PageNumbers are '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPages(System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Int32},IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a range of specified page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfData">Binary data of PDF document as a byte array.</param>
            <param name="PageNumbers">The page numbers of the PDF to read expressed as an Array, List or IEnumerable of <c>int</c>.  PageNumbers are '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPages(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Int32},IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a range of specified page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStream">Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="PageNumbers">The page numbers of the PDF to read expressed as an Array, List or IEnumerable of <c>int</c>.  PageNumbers are '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromPdf(System.Collections.Generic.IEnumerable{System.String},IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPaths">An enumerable of string file path to a PDF document.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromPdf(System.Collections.Generic.IEnumerable{System.String},System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfPaths">An enumerable of String file path to a PDF document.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromPdf(System.Collections.Generic.IEnumerable{System.Byte[]},IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfDatas">An enumerable of Binary data of PDF document as a byte array.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromPdf(System.Collections.Generic.IEnumerable{System.Byte[]},System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfDatas">An enumerable of Binary data of PDF document as a byte array.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromPdf(System.Collections.Generic.IEnumerable{System.IO.Stream},IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStreams">An enumerable of Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesMultiThreadedFromPdf(System.Collections.Generic.IEnumerable{System.IO.Stream},System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from every image embedded in every page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStreams">An enumerable of Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromPdfPages(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Int32},System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from images embedded in a range of specified page of a PDF document.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="PdfStream">Binary data of PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="PageNumbers">The page numbers of the PDF to read expressed as an Array, List or IEnumerable of <c>int</c>.  PageNumbers are '1 based' meaning that the first page number is 1 rather than zero.</param>
            <param name="PdfPassword">Optional password string to open / unencrypt the PDF. Null or "" assign no password.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the PDF.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromMultiFrameTiff(System.String,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from each frame of a multi-page image such as Multi-Frame Tiff and animated Gif formats.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">String file path to an image.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the image frames.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromMultiFrameTiff(IronSoftware.Drawing.AnyBitmap,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from each frame of a multi-page image such as Multi-Frame Tiff and animated Gif formats.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">Multi frame image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the image frames.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromMultiFrameTiff(System.IO.Stream,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from each frame of a multi-page image such as Multi-Frame Tiff and animated Gif formats.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">Multi frame image as a <see cref="T:System.IO.Stream" />.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the image frames.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromMultiFrameTiffInCropArea(System.String,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from a specified rectangular area within each frame of a multi-page image.  Multi-Frame Tiff and animated Gif formats supported.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">Multi frame image as a string path to an image file.</param>
            <param name="CropArea">The area of each image frame in which to scan for barcodes. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the image frames.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromMultiFrameTiffInCropArea(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from a specified rectangular area within each frame of a multi-page image.  Multi-Frame Tiff and animated Gif formats supported.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">Multi frame image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</param>
            <param name="CropArea">The area of each image frame in which to scan for barcodes. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the image frames.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeReader.ReadBarcodesFromMultiFrameTiffInCropArea(System.IO.Stream,IronSoftware.Drawing.CropRectangle,IronBarCode.BarcodeEncoding,IronBarCode.BarcodeReader.BarcodeRotationCorrection,IronBarCode.BarcodeReader.BarcodeImageCorrection)">
            <summary>
            Reads barcodes from a specified rectangular area within each frame of a multi-page image.  Multi-Frame Tiff and animated Gif formats supported.
            <para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para>Features granular settings for developer control to balance performance against accuracy for their given use case.</para><para> Overloads of this method accept InputImage as string file paths as well as <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:System.IO.Stream" /> types.</para></summary>
            <param name="InputImage">Multi frame image as a <see cref="T:System.IO.Stream" />.</param>
            <param name="CropArea">The area of each image frame in which to scan for barcodes. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.</param>
            <param name="BarcodeFormat">The barcode encoding types to read from the image frames.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.</param>
            <param name="RotationCorrection">Setting to allow the barcode reader to detect and accurately read barcodes which are rotated or skewed with perspective using a Hough Transform.   Default tolerance is 10 Degrees of rotation; higher levels use more CPU.</param>
            <param name="ImageCorrection">Setting which can clean noisy input images by allowing barcodes to be distinguished from the rest of the image.  CPU Intensive.</param>
            <returns>
            An Array of <see cref="T:IronBarCode.BarcodeResult" />. Array length will be zero if no barcodes were found.
            </returns>
        </member>
        <member name="T:IronBarCode.PageOrientation">
            <summary>
            Specifies the orientation of a page.
            </summary>
        </member>
        <member name="F:IronBarCode.PageOrientation.Landscape">
            <summary>
            The image's width is greater than its height.
            </summary>
        </member>
        <member name="F:IronBarCode.PageOrientation.Portrait">
            <summary>
            The image's height is greater than its width.
            </summary>
        </member>
        <member name="T:IronBarCode.BarcodeOrientation">
            <summary>
            Specifies the orientation of a Barcode.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeOrientation.Horizontal">
            <summary>
            Barcode is aligned Horizontally
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeOrientation.Vertical">
            <summary>
            Barcode is aligned Vertically
            </summary>
        </member>
        <member name="T:IronBarCode.ReadingSpeed">
            <summary>
            Specify the reading speed of IronBarcode. Setting a more detailed option will use more CPU and take longer.
            <para>Please understand that pre-processing is CPU-heavy and we recommend experimenting with different settings starting with the lowest settings first and gradually working up from there.</para></summary>
        </member>
        <member name="F:IronBarCode.ReadingSpeed.Faster">
            <summary>
            No Processing (Default). Barcode images are not preprocessed at all.
            </summary>
        </member>
        <member name="F:IronBarCode.ReadingSpeed.Balanced">
            <summary>
            Light Processing is performed to attempt to clarify the barcode area and make it stand out more for the reader.
            </summary>
        </member>
        <member name="F:IronBarCode.ReadingSpeed.Detailed">
            <summary>
            Medium Processing is performed to attempt to clarify the barcode area and make it stand out more for the reader.
            <para>This is a CPU-intensive operation. We recommend experimenting with all levels of processing to ensure you are using the weakest one required to improve performance.</para></summary>
        </member>
        <member name="F:IronBarCode.ReadingSpeed.ExtremeDetail">
            <summary>
            Heavy Processing is performed to attempt to clarify the barcode area and make it stand out more for the reader.
            <para>Please use this ReadingSpeed if you are trying to read multiple barcodes with the same values in one input file.</para><para>This is a very CPU-intensive operation and may still not improve blurry barcodes or noisy images. </para><para>Please consider using our filters: <see href="https://ironsoftware.com/csharp/ocr/tutorials/c-sharp-ocr-image-filters/" /></para></summary>
        </member>
        <member name="T:IronBarCode.BarcodeWriter">
            <summary>
            A static class allowing for barcode images of many types to be generated dynamically.
            <para>Generated Barcodes can be exported as Images, Bitmaps, Files, PDFs and Streams.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriter.DefaultWidth">
            <summary>
            The default max width of a rendered barcode in pixels. 250px
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriter.DefaultHeight">
            <summary>
            The default max height of a rendered barcode in pixels. 250px
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriter.DefaultCharacterEncoding">
            <summary>
            The default character encoding for binary data.
            </summary>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.String,IronBarCode.BarcodeWriterEncoding)">
            <summary>
            Creates (renders) a barcode representing a string value.
            </summary>
            <param name="Value">The value of the barcode as a string.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes. </param>
            <returns>A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.Byte[],IronBarCode.BarcodeWriterEncoding)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryData">The binary data which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.IO.Stream,IronBarCode.BarcodeWriterEncoding)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryDataStream">The binary data stream which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.String,IronBarCode.BarcodeWriterEncoding,System.Int32,System.Int32)">
            <summary>
            Creates (renders) a barcode representing a string value.
            </summary>
            <param name="Value">The value of the barcode as a string.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <param name="MaxWidth">The maximum width (in pixels) of the barcode image which will be rendered.</param>
            <param name="MaxHeight">The maximum height (in pixels) of the barcode image which will be rendered.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.Byte[],IronBarCode.BarcodeWriterEncoding,System.Int32,System.Int32)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryData">The binary data which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <param name="MaxWidth">The maximum width (in pixels) of the barcode image which will be rendered.</param>
            <param name="MaxHeight">The maximum height (in pixels) of the barcode image which will be rendered.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.IO.Stream,IronBarCode.BarcodeWriterEncoding,System.Int32,System.Int32)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryDataStream">The binary data stream which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <param name="MaxWidth">The maximum width (in pixels) of the barcode image which will be rendered.</param>
            <param name="MaxHeight">The maximum height (in pixels) of the barcode image which will be rendered.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.String,IronBarCode.BarcodeEncoding)">
            <summary>
            Creates (renders) a barcode representing a string value.
            </summary>
            <param name="Value">The value of the barcode as a string.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes. </param>
            <returns>A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.</returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.Byte[],IronBarCode.BarcodeEncoding)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryData">The binary data which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.IO.Stream,IronBarCode.BarcodeEncoding)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryDataStream">The binary data stream which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.String,IronBarCode.BarcodeEncoding,System.Int32,System.Int32)">
            <summary>
            Creates (renders) a barcode representing a string value.
            </summary>
            <param name="Value">The value of the barcode as a string.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <param name="MaxWidth">The maximum width (in pixels) of the barcode image which will be rendered.</param>
            <param name="MaxHeight">The maximum height (in pixels) of the barcode image which will be rendered.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.Byte[],IronBarCode.BarcodeEncoding,System.Int32,System.Int32)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryData">The binary data which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <param name="MaxWidth">The maximum width (in pixels) of the barcode image which will be rendered.</param>
            <param name="MaxHeight">The maximum height (in pixels) of the barcode image which will be rendered.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="M:IronBarCode.BarcodeWriter.CreateBarcode(System.IO.Stream,IronBarCode.BarcodeEncoding,System.Int32,System.Int32)">
            <summary>
            Creates (renders) a barcode representing a binary value.
            </summary>
            <param name="BinaryDataStream">The binary data stream which the barcode will represent.</param>
            <param name="BarcodeType">Type of the barcode encoding type.  Supports many popular barcode formats including QR Codes.</param>
            <param name="MaxWidth">The maximum width (in pixels) of the barcode image which will be rendered.</param>
            <param name="MaxHeight">The maximum height (in pixels) of the barcode image which will be rendered.</param>
            <returns>
            A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream.
            </returns>
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodeContentTooLongEncodingException">
            <summary>
            A specific Exception raised when the Value of a barcode is too long for the selected <see cref="T:IronBarCode.BarcodeEncoding" /></summary>
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodeEncodingException">
            <summary>
            A generic Exception raised during the encoding of a barcode by IronBarCode
            </summary>
            <seealso cref="!:IronBarCode.IronBarCodeException" />
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodeException">
            <summary>
            A generic Exception raised by IronBarCode
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodeFileException">
            <summary>
            A generic Exception raised by IronBarCode when a file can not be read or written
            </summary>
            <seealso cref="T:IronBarCode.Exceptions.IronBarCodeException" />
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException">
            <summary>
            A specific Exception raised when the Value of a barcode contains non numeric characters for a <see cref="T:IronBarCode.BarcodeEncoding" /> which only accepts digits.
            </summary>
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodePdfPasswordException">
            <summary>
            Represents errors that occur during PDF processing in IronBarCode due to incorrect or missing password.
            </summary>
            <remarks>
            This exception is thrown when a PDF document cannot be read due to password issues.
            </remarks>
        </member>
        <member name="M:IronBarCode.Exceptions.IronBarCodePdfPasswordException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronBarCode.Exceptions.IronBarCodePdfPasswordException" /> class.
            </summary>
        </member>
        <member name="M:IronBarCode.Exceptions.IronBarCodePdfPasswordException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronBarCode.Exceptions.IronBarCodePdfPasswordException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IronBarCode.Exceptions.IronBarCodePdfPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IronBarCode.Exceptions.IronBarCodePdfPasswordException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodeUnsupportedException">
            <summary>
            A generic Exception raised by IronBarCode
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:IronBarCode.Exceptions.IronBarCodeUnsupportedRendererEncodingException">
            <summary>
            A specific Exception raised when IronBarCode does not yet support the selected <see cref="T:IronBarCode.BarcodeEncoding" /> format. 
            <para>We suggest using the <see cref="T:IronBarCode.BarcodeWriterEncoding" /> Enum to specify your barcode encoding format to avoid this Exception in future.</para></summary>
        </member>
        <member name="T:IronBarCode.GeneratedBarcode">
            <summary>
            A barcode generated by IronBarCode.
            <para>In addition to exporting the barcode as a graphic, we may also resize it, recolor it and annotate it with this class using fluent notation.</para><para>GeneratedBarcodes may be exported as Images, Objects or PDF files.  They may also be exported as HTML for use on the web.</para></summary>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.Render">
            <summary>
            Renders this barcode to an <see cref="T:IronSoftware.Drawing.AnyBitmap" /></summary>
            <returns>A <see cref="T:IronSoftware.Drawing.AnyBitmap" /> representing the barcode</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToBitmap">
            <summary>
            Returns the barcode as an <see cref="T:IronSoftware.Drawing.AnyBitmap" /></summary>
            <returns>A <see cref="T:IronSoftware.Drawing.AnyBitmap" /></returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToImage">
            <summary>
            Returns the barcode as an <see cref="T:IronSoftware.Drawing.AnyBitmap" /></summary>
            <returns>A <see cref="T:IronSoftware.Drawing.AnyBitmap" /></returns>
        </member>
        <member name="P:IronBarCode.GeneratedBarcode.Image">
            <summary>
            Returns the barcode as an <see cref="T:IronSoftware.Drawing.AnyBitmap" /></summary>
            <returns>A <see cref="T:IronSoftware.Drawing.AnyBitmap" /></returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToStream">
            <summary>
            Renders the barcode as an image <see cref="T:System.IO.Stream" /></summary>
            <returns>A <see cref="T:System.IO.MemoryStream" /> containing encoded image file data.  The default encoding is PNG</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToStream(IronSoftware.Drawing.AnyBitmap.ImageFormat)">
            <summary>
            Renders the barcode as an image <see cref="T:System.IO.Stream" /></summary>
            <param name="ImageFormat">(optional) The image format as a <see cref="T:IronSoftware.Drawing.AnyBitmap.ImageFormat" />.</param>
            <returns>
            A <see cref="T:System.IO.MemoryStream" /> containing encoded image file data
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this GeneratedBarcodes value.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:IronBarCode.GeneratedBarcode.Width">
            <summary>
            Gets the final width of the  generated barcode image in pixels.
            <para>Includes the width of margins and annotations</para></summary>
            <value>
            The width in px
            </value>
        </member>
        <member name="P:IronBarCode.GeneratedBarcode.Height">
            <summary>
            Gets the final height of the generated barcode image in pixels.
            <para>Includes the height of margins and annotations</para></summary>
            <value>
            The height in px
            </value>
        </member>
        <member name="P:IronBarCode.GeneratedBarcode.Value">
            <summary>
            Gets the text value if the barcode
            </summary>
            <value>
            The barcode value.
            </value>
        </member>
        <member name="P:IronBarCode.GeneratedBarcode.BinaryValue">
            <summary>
            Gets the value of the barcode as binary data
            </summary>
            <value>
            The barcode value as a byte array.
            </value>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToDataUrl">
            <summary>
            Converts the barcode to a base64 data URL.
            <para>The data URI scheme is a uniform resource identifier (URI) scheme that provides a way to include data in-line in web pages as if they were external resources.</para><para><see href="https://en.wikipedia.org/wiki/Data_URI_scheme" /></para></summary>
            <returns>The Data URL as a string.</returns>
            <seealso cref="M:IronBarCode.GeneratedBarcode.ToHtmlTag" />
            <seealso cref="M:IronBarCode.GeneratedBarcode.SaveAsHtmlFile(System.String)" />
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToHtmlTag">
            <summary>
            Renders the barcode as a HTML image Tag.  The tag is fully formed (using a data-url&gt; and can be injected into HTML with no JS, CSS or image dependencies.
            </summary>
            <returns>An Html img tag as a string.</returns>
        </member>
        <member name="P:IronBarCode.GeneratedBarcode.BinaryStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream" /> of the barcode rendered as a Bitmap image.
            </summary>
            <value>
            The barcode image as a binary stream.
            </value>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.Verify(System.String)">
            <summary>
            Verifies this barcode is still readable by IronBarCode.
            <para>Resizing a barcode to a very small size us using unconventional colors may make it unreadable to a machine.  This method verifies that a barcode is still fully readable.</para></summary>
            <returns>
                <c>true</c> if the barcodes is still machine-readable</returns>
        </member>
        <member name="P:IronBarCode.GeneratedBarcode.BarcodeType">
            <summary>
            Gets the <see cref="T:IronBarCode.BarcodeEncoding" /> type of this barcode.
            </summary>
            <value>
            The type of the barcode.
            </value>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SetMargins(System.Int32)">
            <summary>
            Sets whitespace margins around the barcode.
            </summary>
            <param name="PixelWidth">Width of margins in pixels.</param>
            <returns>This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SetMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets whitespace margins around the barcode.
            </summary>
            <param name="Top">The top margin in pixels.</param>
            <param name="Right">The right margin in pixels.</param>
            <param name="Bottom">The bottom in pixels.</param>
            <param name="Left">The left margin in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ChangeBackgroundColor(IronSoftware.Drawing.Color)">
            <summary>
            Sets the background color behind the barcode.
            </summary>
            <param name="BackgroundColor">Color of the background.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ChangeBarCodeColor(IronSoftware.Drawing.Color,System.Boolean)">
            <summary>
            Sets the barcode color.
            </summary>
            <param name="BarcodeColor">Color of the barcode (foreground).</param>
            <param name="ForcedChangeColor">If ForcedChangeColor is true will skip checking by reading engine. Default is false.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsPdf(System.String)">
            <summary>
            Saves the barcode as a new PDF document.
            </summary>
            <param name="FilePath">The file path for the PDF.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsPng(System.String)">
            <summary>
            Saves the barcode as a PNG image file.
            </summary>
            <param name="FilePath">The file path for the PNG.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToPngBinaryData">
            <summary>
             Returns the barcode as the binary data for a PNG image.
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToPngStream">
            <summary>
             Returns the barcode as a <see cref="T:System.IO.MemoryStream" /> of the binary data for a PNG image.
            </summary>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsJpeg(System.String)">
            <summary>
            Saves the barcode as a JPEG image file.
            </summary>
            <param name="FilePath">The file path for the JPEG.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToJpegBinaryData">
            <summary>
             Returns the barcode as the binary data for a JPEG/JPG image.
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToJpegStream">
            <summary>
             Returns the barcode  as a <see cref="T:System.IO.MemoryStream" /> of the binary data for a JPEG/JPG image.
            </summary>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsTiff(System.String)">
            <summary>
             Saves the barcode as a TIFF image file.
             </summary>
            <param name="FilePath">The file path for the TIFF.</param>
            <returns>
             This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
             </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToTiffBinaryData">
            <summary>
             Returns the barcode as the binary data for a TIFF image.
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToTiffStream">
            <summary>
             Returns the barcode as a <see cref="T:System.IO.MemoryStream" /> of the binary data as the binary data for a TIFF image.
            </summary>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsGif(System.String)">
            <summary>
             Saves the barcode as a GIF image file.
             </summary>
            <param name="FilePath">The file path for the GIF.</param>
            <returns>
             This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
             </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToGifBinaryData">
            <summary>
             Returns the barcode as the binary data for a GIF image.
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToGifStream">
            <summary>
             Returns the barcode as a <see cref="T:System.IO.MemoryStream" /> of the binary data for a GIF image.
            </summary>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsWindowsBitmap(System.String)">
            <summary>
             Saves the barcode as a BMP image file.
             </summary>
            <param name="FilePath">The file path for the BMP.</param>
            <returns>
             This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
             </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToWindowsBitmapBinaryData">
            <summary>
            Returns the barcode as the binary data for a Bitmap BMP image.
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToWindowsBitmapStream">
            <summary>
            Returns the barcode as a <see cref="T:System.IO.MemoryStream" /> of the binary data for a Bitmap BMP image.
            </summary>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ResizeTo(System.Int32,System.Int32)">
            <summary>
            Resizes the Barcode (excluding annotations and margins).  This process causes a re-render and is lossless.
            </summary>
            <param name="MaxWidth">The maximum width of the barcode in px. May be ignored if the value is too small for the barcode to be read.</param>
            <param name="MaxHeight">The maximum height of the barcode in px.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ResizeToMil(System.Double,System.Double,System.Int32)">
            <summary>
            Resize the barcode using the specified 'mil' width (thousandths of an inch) 
            </summary>
            <param name="MilWidth">The width of the narrowest barcode element, in thousandths of an inch.</param>
            <param name="InchHeight">The height of the barcode in inch. (Default is 1 inch)</param>
            <param name="DPI">Dots-per-inch (Default is 96)</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.KeepAspectRatio(System.Boolean,IronBarCode.BarCodeAspectSide)">
            <summary>
            Keep Aspect Ratio When resizing BarCode
            </summary>
            <param name="keepAspectRatio">Is Keep Aspect Ratio.</param>
            <param name="barCodeAspectSide">Side (Horizontal / Vertical) that need to keep. (Default is Horizontal)</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="TextSpacing">The top and bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(System.String)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="FontPath">Path to the Font of the barcode value text. This may be a relative or a full absolute path.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(System.String,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="FontPath">Path to the Font of the barcode value text. This may be a relative or a full absolute path.</param>
            <param name="TextSpacing">The top and bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="TopTextSpacing">The top spacing of the barcode value text in pixels.</param>
            <param name="BottomTextSpacing">The bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="FontPath">Path to the Font of the barcode value text. This may be a relative or a full absolute path.</param>
            <param name="TopTextSpacing">The top spacing of the barcode value text in pixels.</param>
            <param name="BottomTextSpacing">The bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(IronSoftware.Drawing.Font,IronSoftware.Drawing.Color)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.</para></summary>
            <param name="FontFace">The typeface of the barcode value text.</param>
            <param name="FontColor">Color of the barcode value text.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.</para></summary>
            <param name="FontFace">The typeface of the barcode value text.</param>
            <param name="FontColor">Color of the barcode value text.</param>
            <param name="TextSpacing">The top and bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextAboveBarcode(IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered above the barcode.</para></summary>
            <param name="FontFace">The typeface of the barcode value text.</param>
            <param name="FontColor">Color of the barcode value text.</param>
            <param name="TopTextSpacing">The top spacing of the barcode value text in pixels.</param>
            <param name="BottomTextSpacing">The bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="TextSpacing">The top and bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(System.String)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="FontPath">Path to the Font of the barcode value text. This may be a relative or a full absolute path.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(System.String,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="FontPath">Path to the Font of the barcode value text. This may be a relative or a full absolute path.</param>
            <param name="TextSpacing">The top and bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="TopTextSpacing">The top spacing of the barcode value text in pixels.</param>
            <param name="BottomTextSpacing">The bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="FontPath">Path to the Font of the barcode value text. This may be a relative or a full absolute path.</param>
            <param name="TopTextSpacing">The top spacing of the barcode value text in pixels.</param>
            <param name="BottomTextSpacing">The bottom spacing of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(IronSoftware.Drawing.Font,IronSoftware.Drawing.Color)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.</para></summary>
            <param name="FontFace">The typeface of the barcode value text.</param>
            <param name="FontColor">Color of the barcode value text.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.</para></summary>
            <param name="FontFace">The typeface of the barcode value text.</param>
            <param name="FontColor">Color of the barcode value text.</param>
            <param name="TextSpacing">The top and bottom spacing for barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddBarcodeValueTextBelowBarcode(IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with text showing it's value.
            <para>the barcode value is rendered below the barcode.</para></summary>
            <param name="FontFace">The typeface of the barcode value text.</param>
            <param name="FontColor">Color of the barcode value text.</param>
            <param name="TopTextSpacing">The top margin of the barcode value text in pixels.</param>
            <param name="BottomTextSpacing">The bottom of the barcode value text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,System.String,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="TopTextSpacing">The top margin of the annotation text in pixels.</param>
            <param name="BottomTextSpacing">The bottom of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TopTextSpacing">The top margin of the annotation text in pixels.</param>
            <param name="BottomTextSpacing">The bottom of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.String,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextAboveBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered above the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TopTextSpacing">The top margin of the annotation text in pixels.</param>
            <param name="BottomTextSpacing">The bottom of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,System.String,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="TopTextSpacing">The top margin of the annotation text in pixels.</param>
            <param name="BottomTextSpacing">The bottom of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.  Overloads of this method allow for the typeface and font size to be specific in detail.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TopTextSpacing">The top margin of the annotation text in pixels.</param>
            <param name="BottomTextSpacing">The bottom of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.String,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TextSpacing">The top and bottom spacing of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.AddAnnotationTextBelowBarcode(System.String,IronSoftware.Drawing.Font,IronSoftware.Drawing.Color,System.String,System.Int32,System.Int32)">
            <summary>
            Annotates the barcode with any string of text.
            <para>the text is rendered below the barcode.</para></summary>
            <param name="AnnotationText">The annotation text to be displayed.</param>
            <param name="FontFace">The typeface of the annotation text.</param>
            <param name="FontColor">Color of the annotation text.</param>
            <param name="FontPath">Path to the Font of the annotation text. This may be a relative or a full absolute path.</param>
            <param name="TopTextSpacing">The top margin of the annotation text in pixels.</param>
            <param name="BottomTextSpacing">The bottom of the annotation text in pixels.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsImage(System.String)">
            <summary>
            Saves the Barcode as an image file.
            <para>The image encoding will automatically match the file extension specified in your ImagePath. Defaults to Bitmap image encoding if ambiguous.</para></summary>
            <param name="ImagePath">The file path where the image will be saved to disk.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.SaveAsHtmlFile(System.String)">
            <summary>
            Saves the Barcode as  fully functional and self-contained HTML file.
            <para>The image encoding will automatically match the file extension specified in your ImagePath. Defaults to Bitmap image encoding if ambiguous.</para></summary>
            <param name="HtmlFilePath">The file path where the HTML document will be saved.</param>
            <returns>
            This instance of <see cref="T:IronBarCode.GeneratedBarcode">GeneratedBarcode</see> allowing for a fluent programming style.
            </returns>
            <seealso cref="M:IronBarCode.GeneratedBarcode.ToHtmlTag" />
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToPdfBinaryData">
            <summary>
            Returns a 1 page PDF document containing the barcode, as binary data.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.ToPdfStream">
            <summary>
            Returns a binary <see cref="T:System.IO.MemoryStream" /> containing a 1 page PDF document containing the barcode, as binary data.
            </summary>
            <returns>A <see cref="T:System.IO.Stream" /></returns>
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.StampToExistingPdfPage(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Stamps (draws) the Barcode onto an existing page of an existing PDF document.
            </summary>
            <param name="PdfFilePath">The file path of the PDF which will have the Barcode added to it..</param>
            <param name="X">The horizontal position of the barcode on the PDF page in pixels</param>
            <param name="Y">The vertical position of the barcode on the PDF page in pixels</param>
            <param name="PageNumber">The page of the PDF to stamp.   [One Based] such that the first page is number 1 rather than 0.</param>
            <param name="Password">The PDF encryption or administrator password if this PDF is digitally protected from modification or opening.</param>
            <returns />
        </member>
        <member name="M:IronBarCode.GeneratedBarcode.StampToExistingPdfPages(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Stamps (draws) the Barcode onto multiple existing pages of an existing PDF document.
            </summary>
            <param name="PdfFilePath">The file path of the PDF which will have the Barcode added to it..</param>
            <param name="X">The horizontal position of the barcode on each PDF page in pixels</param>
            <param name="Y">The vertical position of the barcode on each PDF page in pixels</param>
            <param name="PageNumbers">The page numbers of the PDF to stamp as an enumeration, list or array.  [One Based] such that the first page is number 1 rather than 0.</param>
            <param name="Password">The PDF encryption or administrator password if this PDF is digitally protected from modification or opening.</param>
            <returns />
        </member>
        <member name="T:IronBarCode.IImageFilter">
            <summary>
            A collection of <see cref="T:IronBarCode.ImageFilterCollection" /> for processing Images.
            </summary>
        </member>
        <member name="T:IronBarCode.AdaptiveThresholdFilter">
            <summary>
            A filter to applied the Bradley Adaptive Threshold to the image.
            </summary>
        </member>
        <member name="P:IronBarCode.AdaptiveThresholdFilter.Threshold">
            <summary>
            Threshold limit (0.0-1.0) to consider for binarization. Default = 0.4.
            </summary>
        </member>
        <member name="P:IronBarCode.AdaptiveThresholdFilter.Upper">
            <summary>
            Upper (white) color for thresholding.
            </summary>
        </member>
        <member name="P:IronBarCode.AdaptiveThresholdFilter.Lower">
            <summary>
            Lower (black) color for thresholding.
            </summary>
        </member>
        <member name="P:IronBarCode.AdaptiveThresholdFilter.Rectangle">
            <summary>
            Rectangle region to apply the processor on.
            </summary>
        </member>
        <member name="M:IronBarCode.AdaptiveThresholdFilter.#ctor">
            <summary>
            Initializes a new instance of the AdaptiveThresholdFilter class.
            </summary>
        </member>
        <member name="M:IronBarCode.AdaptiveThresholdFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the AdaptiveThresholdFilter class with the specified Threshold.
            </summary>
            <param name="Threshold">Threshold limit (0.0-1.0) to consider for binarization.</param>
        </member>
        <member name="M:IronBarCode.AdaptiveThresholdFilter.#ctor(IronSoftware.Drawing.Color,IronSoftware.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the AdaptiveThresholdFilter class with the specified Upper, Lower and Threshold.
            </summary>
            <param name="Upper">Upper (white) color for thresholding.</param>
            <param name="Lower">Lower (black) color for thresholding.</param>
            <param name="Threshold">Threshold limit (0.0-1.0) to consider for binarization.</param>
        </member>
        <member name="M:IronBarCode.AdaptiveThresholdFilter.#ctor(IronSoftware.Drawing.Color,IronSoftware.Drawing.Color,System.Single,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Initializes a new instance of the AdaptiveThresholdFilter class with the specified Upper, Lower, Threshold and Rectangle.
            </summary>
            <param name="Upper">Upper (white) color for thresholding.</param>
            <param name="Lower">Lower (black) color for thresholding.</param>
            <param name="Threshold">Threshold limit (0.0-1.0) to consider for binarization.</param>
            <param name="Rectangle">Rectangle region to apply the processor on.</param>
        </member>
        <member name="T:IronBarCode.BinaryThresholdFilter">
            <summary>
            A filter to applied the binarization to the image splitting the pixels at the given threshold with Luminance as the color component to be compared to threshold.
            </summary>
        </member>
        <member name="P:IronBarCode.BinaryThresholdFilter.Threshold">
            <summary>
            The threshold to apply binarization of the image. Must be between 0 and 1. Default = 0.4.
            </summary>
        </member>
        <member name="P:IronBarCode.BinaryThresholdFilter.Upper">
            <summary>
            The color to use for pixels that are above the threshold.
            </summary>
        </member>
        <member name="P:IronBarCode.BinaryThresholdFilter.Lower">
            <summary>
            The color to use for pixels that are below the threshold.
            </summary>
        </member>
        <member name="P:IronBarCode.BinaryThresholdFilter.Rectangle">
            <summary>
            Rectangle region to apply the processor on.
            </summary>
        </member>
        <member name="M:IronBarCode.BinaryThresholdFilter.#ctor">
            <summary>
            Initializes a new instance of the BinaryThresholdFilter class.
            </summary>
        </member>
        <member name="M:IronBarCode.BinaryThresholdFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the BinaryThresholdFilter class with the specified Threshold.
            </summary>
            <param name="Threshold">Threshold limit (0.0-1.0) to consider for binarization.</param>
        </member>
        <member name="M:IronBarCode.BinaryThresholdFilter.#ctor(IronSoftware.Drawing.Color,IronSoftware.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the BinaryThresholdFilter class with the specified Upper, Lower and Threshold.
            </summary>
            <param name="Upper">Upper (white) color for thresholding.</param>
            <param name="Lower">Lower (black) color for thresholding.</param>
            <param name="Threshold">Threshold limit (0.0-1.0) to consider for binarization.</param>
        </member>
        <member name="M:IronBarCode.BinaryThresholdFilter.#ctor(IronSoftware.Drawing.Color,IronSoftware.Drawing.Color,System.Single,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Initializes a new instance of the BinaryThresholdFilter class with the specified Upper, Lower, Threshold and Rectangle.
            </summary>
            <param name="Upper">Upper (white) color for thresholding.</param>
            <param name="Lower">Lower (black) color for thresholding.</param>
            <param name="Threshold">Threshold limit (0.0-1.0) to consider for binarization.</param>
            <param name="Rectangle">Rectangle region to apply the processor on.</param>
        </member>
        <member name="T:IronBarCode.BrightnessFilter">
            <summary>
            A filter for adjust image brightness.
            </summary>
        </member>
        <member name="P:IronBarCode.BrightnessFilter.Amount">
            <summary>
            The proportion of the conversion. Must be greater than or equal to 0. Default = 1.
            <para>A value of 0 will create an image that is completely black. A value of 1 leaves the input unchanged.</para></summary>
        </member>
        <member name="M:IronBarCode.BrightnessFilter.#ctor">
            <summary>
            Initializes a new instance of the BrightnessFilter class.
            </summary>
        </member>
        <member name="M:IronBarCode.BrightnessFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the BrightnessFilter class with the specified amount.
            </summary>
            <param name="Amount">
            The proportion of the conversion. Must be greater than or equal to 0. Default = 1.
            <para>A value of 0 will create an image that is completely black. A value of 1 leaves the input unchanged.</para></param>
        </member>
        <member name="T:IronBarCode.ContrastFilter">
            <summary>
            A filter for adjust image Contrast.
            </summary>
        </member>
        <member name="P:IronBarCode.ContrastFilter.Amount">
            <summary>
            The proportion of the conversion. Must be greater than or equal to 0. Default = 1.
            <para>A value of 0 will create an image that is completely gray. A value of 1 leaves the input unchanged.</para></summary>
        </member>
        <member name="M:IronBarCode.ContrastFilter.#ctor">
            <summary>
            Initializes a new instance of the ContrastFilter class.
            </summary>
        </member>
        <member name="M:IronBarCode.ContrastFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the ContrastFilter class with the specified amount.
            </summary>
            <param name="Amount">
            The proportion of the conversion. Must be greater than or equal to 0. Default = 1.
            <para>A value of 0 will create an image that is completely gray. A value of 1 leaves the input unchanged.</para></param>
        </member>
        <member name="T:IronBarCode.InvertFilter">
            <summary>
            A filter for inverts the colors of the image.
            </summary>
        </member>
        <member name="P:IronBarCode.InvertFilter.Rectangle">
            <summary>
            The Rectangle structure that specifies the portion of the image object to alter.
            </summary>
        </member>
        <member name="M:IronBarCode.InvertFilter.#ctor">
            <summary>
            Initializes a new instance of the InvertFilter class.
            </summary>
        </member>
        <member name="M:IronBarCode.InvertFilter.#ctor(IronSoftware.Drawing.CropRectangle)">
            <summary>
            Initializes a new instance of the InvertFilter class with the specified Sigma value.
            </summary>
            <param name="Rectangle">The Rectangle structure that specifies the portion of the image object to alter.</param>
        </member>
        <member name="T:IronBarCode.SharpenFilter">
            <summary>
            A filter to applied the Gaussian sharpening filter to the image.
            </summary>
        </member>
        <member name="P:IronBarCode.SharpenFilter.Sigma">
            <summary>
            The 'Sigma' value representing the weight of the blur. Default: 3.0f.
            </summary>
        </member>
        <member name="M:IronBarCode.SharpenFilter.#ctor">
            <summary>
            Initializes a new instance of the SharpenFilter class.
            </summary>
        </member>
        <member name="M:IronBarCode.SharpenFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the SharpenFilter class with the specified Sigma.
            </summary>
            <param name="Sigma">The 'Sigma' value representing the weight of the blur.</param>
        </member>
        <member name="T:IronBarCode.ImageFilterCollection">
            <summary>
            A collection of ImageFilter for processing Image.
            </summary>
        </member>
        <member name="T:IronBarCode.BarcodeEncoding">
            <summary>
            Barcode Encoding Types.
            <para>Setting a <see cref="T:IronBarCode.BarcodeEncoding" /> when reading Barcodes improves performance by only looking for expected barcode types.</para><para>Setting a <see cref="T:IronBarCode.BarcodeEncoding" /> when rendering Barcodes chooses the type and design of barcode to be generated.  For barcode creation please also see the <see cref="T:IronBarCode.BarcodeWriterEncoding" /> Enum which omits barcode formats which are not writable with IronBarCode.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.All">
            <summary> Read any type of Barcode within the <see cref="T:IronBarCode.BarcodeEncoding" /> Enum</summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.AllOneDimensional">
            <summary>Read all 1 Dimensional (linear) types of Barcode including stacked 1 dimensional barcodes.</summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.AllTwoDimensional">
            <summary>Read all 2 dimensional types of Barcode (grid, matrix and stacked).</summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Codabar">
            <summary>
            Codabar 1D barcode format.  Codabar is a linear barcode symbology developed in 1972 by Pitney Bowes Corp
            <para>Please Note: Codabar encodes numerical data (digits) only.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Code39">
            <summary>
            Code 39 1D barcode format. Code 39 is a variable length, discrete barcode symbology. The Code 39 specification defines 43 characters, consisting of uppercase letters (A through Z).
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Code93">
            <summary>
            Code 93 1D barcode format. Code 93 is a barcode symbology designed in 1982 by Intermec to provide a higher density and data security enhancement to Code 39.
            <para>Code 93 Supports encoding of only the following ASCII characters: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 - . $ / + % SPACE</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Code128">
            <summary>
            Code 128 1D format. Code 128 is a high-density linear barcode symbology defined in ISO/IEC 15417:2007. It is used for alphanumeric or numeric-only barcodes.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.EAN8">
            <summary>
            EAN-8 1D barcode format. An EAN-8 is an EAN/UPC symbology barcode and is derived from the longer International Article Number (EAN-13) code.
            <para>Please Note: EAN-8 may only encode numerical (digits) content of length 7 or 8 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.EAN13">
            <summary>
                EAN-13 1D format. The International Article Number (also known as European Article Number or EAN) is a standard describing a barcode symbology and numbering system used in global trade to identify a specific retail product type, in a specific packaging configuration, from a specific manufacturer.Titf
                <para>Please Note: EAN-13 may only encode numerical (digits) content of length 12 or 13 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.ITF">
            <summary>
                 ITF (Interleaved Two of Five) 1D format.  ITF-14 is the GS1 implementation of an Interleaved 2 of 5 (ITF) bar code to encode a Global Trade Item Number. ITF-14 symbols are generally used on packaging levels of a product, such as a case box of 24 cans of soup. The ITF-14 will always encode 14 digits.s
               <para>Please Note: ITF encodes numerical data only. If the number if digits is not even, a '0' will automatically be prepended.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.UPCA">
            <summary>
             UPC-A 1D format. The Universal Product Code (UPC) is a barcode symbology that is widely used in the United States, Canada, United Kingdom, Australia, New Zealand, in Europe and other countries for tracking trade items in stores. UPC (technically refers to UPC-A) consists of 12 numeric digits, that are uniquely assigned to each trade item. Along with the related EAN barcode, the UPC is the barcode mainly used for scanning of trade items at the point of sale, per GS1 specifications.
             <para>Please Note: UPCA may only encode numerical (digits) content of length 12 or 13 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para><para>Please Note: UPCA may only encode numerical (digits) content of length 12 or 13 digits long. Shorter Barcodes will have zeros prepended to the start of the content number to pad to the minimum automatically.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.UPCE">
            <summary>
             UPC-E 1D format. To allow the use of UPC barcodes on smaller packages, where a full 12-digit barcode may not fit, a 'zero-suppressed' version of UPC was developed, called UPC-E, in which the number system digit, all trailing zeros in the manufacturer code, and all leading zeros in the product code, are suppressed (omitted).MSI
             <para>Please Note: UPCE may only encode numerical (digits) content of length 7 or 8 digits long.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.MSI">
            <summary>
            MSI 1D format.  MSI is a barcode symbology developed by the MSI Data Corporation, based on the original Plessey Code symbology.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Plessey">
            <summary>
            Plessey 1D format.  Plessey Code is a 1D linear barcode symbology based on pulse width modulation, developed in 1971 by The Plessey Company PLC, a British-based company.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Databar">
            <summary> 
            "RSS Expanded" or "GS1 Databar" barcode formats.   Includes 1D barcode and stacked 2D variants of this barcode format.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Rss14">
            <summary> 
                Reduce Space Symbology 14 barcode format. May represent a 1D barcode or Stacked 2D barcode.   RSS 14 barcode (Reduce Space Symbology) encodes the full 14-digit EAN.UCC item identification in a symbol that can be omni-directionally scanned by suitably configured point-of-sale laser scanners. It is the latest barcode types for space-constrained identification from EAN International and the Uniform Code Council, Inc.. RSS barcodes have been identified to target the grocery industry and in healthcare, where items are too small to allow for other barcode symbologies.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.PDF417">
            <summary> 
                PDF417 format.  PDF417 is a stacked linear barcode symbol format used in a variety of applications, primarily transport, identification cards, and inventory management. PDF stands for Portable Data File. The 417 signifies that each pattern in the code consists of 4 bars and spaces, and that each pattern is 17 units long. The PDF417 symbology was invented by Dr. Ynjiun P. Wang at Symbol Technologies in 1991. (Wang 1993) It is ISO standard 15438.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Aztec">
            <summary> 
                Aztec 2D barcode format.  Aztec Code is a type of 2D barcode invented by Andrew Longacre, Jr. and Robert Hussey in 1995. Named after the resemblance of the central finder pattern to an Aztec pyramid, Aztec code has the potential to use less space than other matrix barcodes because it does not require a surrounding blank "quiet zone".s
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.DataMatrix">
            <summary> 
                Data Matrix 2D barcode format. An example of a Data Matrix code, encoding the text: "Wikipedia, the free encyclopedia" A Data Matrix is a two-dimensional barcode consisting of black and white "cells" or modules arranged in either a square or rectangular pattern, also known as a matrix. The information to be encoded can be text or numeric data. Usual data size is from a few bytes up to 1556 bytes.
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.MaxiCode">
            <summary> 
                 MaxiCode 2D barcode format.  MaxiCode is a public domain, machine-readable symbol system originally created and used by United Parcel Service. Suitable for tracking and managing the shipment of packages, it resembles a barcode, but uses dots arranged in a hexagonal grid instead .
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.QRCode">
            <summary> 
                QR Code 2D barcode format.  QR code (abbreviated from Quick Response Code) is the trademark for a type of matrix barcode (or two-dimensional barcode) first designed in 1994 for the automotive industry in Japan. A barcode is a machine-readable optical label that contains information about the item to which it is attached. A QR code uses four standardized encoding modes (numeric, alphanumeric, byte/binary, and kanji) to efficiently store data; extensions may also be used.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.IntelligentMail">
            <summary> 
                Intelligent Mail 2D barcode format.  The Intelligent Mail Barcode (Also known as "IM Barcode" or "USPS OneCode Barcodes" or "IMB") is a 65-bar barcode for use on mail in the United States. The term "Intelligent Mail" refers to services offered by the United States Postal Service for domestic mail delivery. The IM barcode is intended to provide greater information and functionality than its predecessors POSTNET and PLANET.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.PharmaCode">
            <summary>
            Pharmaceutical Binary Code. A reading fault tolerant binary barcode standard used in the medical industry.   https://en.wikipedia.org/wiki/Pharmacode
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeEncoding.Code128GS1">
            Code 128 with GS1 format. Code 128 is a high-density linear barcode symbology defined in ISO/IEC 15417:2007. It is used for alphanumeric or numeric-only barcodes.
        </member>
        <member name="T:IronBarCode.BarcodeWriterEncoding">
            <summary>
            Chooses the style of barcode to render as an image using IronBarCode.
            This enum is related to <see cref="T:IronBarCode.BarcodeEncoding" /> with the exception that only encodable barcode formats are mentioned.  As this Enum is not of the Flags type, only one  <see cref="T:IronBarCode.BarcodeWriterEncoding" /> can be used to generate a barcode, which is logical.
            </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.Codabar">
            <summary>
                Codabar 1D barcode format.  Codabar is a linear barcode symbology developed in 1972 by Pitney Bowes Corp
              <para>Please Note: Codabar encodes numerical data (digits) only.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.Code39">
            <summary>
                Code 39 1D barcode format. Code 39 is a variable length, discrete barcode symbology. The Code 39 specification defines 43 characters, consisting of uppercase letters (A through Z).
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.Code93">
            <summary>
                Code 93 1D barcode format. Code 93 is a barcode symbology designed in 1982 by Intermec to provide a higher density and data security enhancement to Code 39.
                <para>Code 93 Supports encoding of only the following ASCII characters: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 - . $ / + % SPACE</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.Code128">
            <summary>
                Code 128 1D format. Code 128 is a high-density linear barcode symbology defined in ISO/IEC 15417:2007. It is used for alphanumeric or numeric-only barcodes.
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.EAN8">
            <summary>
                EAN-8 1D barcode format. An EAN-8 is an EAN/UPC symbology barcode and is derived from the longer International Article Number (EAN-13) code.
               <para>Please Note: EAN-8 may only encode numerical (digits) content of length 7 or 8 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.EAN13">
            <summary>
                EAN-13 1D format. The International Article Number (also known as European Article Number or EAN) is a standard describing a barcode symbology and numbering system used in global trade to identify a specific retail product type, in a specific packaging configuration, from a specific manufacturer.Titf
                <para>Please Note: EAN-13 may only encode numerical (digits) content of length 12 or 13 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.ITF">
            <summary>
                ITF (Interleaved Two of Five) 1D format.  ITF-14 is the GS1 implementation of an Interleaved 2 of 5 (ITF) bar code to encode a Global Trade Item Number. ITF-14 symbols are generally used on packaging levels of a product, such as a case box of 24 cans of soup. The ITF-14 will always encode 14 digits.s
              <para>Please Note: ITF encodes numerical data only. If the number if digits is not even, a '0' will automatically be prepended.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.UPCA">
            <summary>
                UPC-A 1D format. The Universal Product Code (UPC) is a barcode symbology that is widely used in the United States, Canada, United Kingdom, Australia, New Zealand, in Europe and other countries for tracking trade items in stores. UPC (technically refers to UPC-A) consists of 12 numeric digits, that are uniquely assigned to each trade item. Along with the related EAN barcode, the UPC is the barcode mainly used for scanning of trade items at the point of sale, per GS1 specifications.
                <para>Please Note: UPCA may only encode numerical (digits) content of length 12 or 13 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.UPCE">
            <summary>
                UPC-E 1D format. To allow the use of UPC barcodes on smaller packages, where a full 12-digit barcode may not fit, a 'zero-suppressed' version of UPC was developed, called UPC-E, in which the number system digit, all trailing zeros in the manufacturer code, and all leading zeros in the product code, are suppressed (omitted).MSI
                <para>Please Note: UPCE may only encode numerical (digits) content of between 8 and more than 13 digits long.</para></summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.MSI">
            <summary>
                MSI 1D format.  MSI is a barcode symbology developed by the MSI Data Corporation, based on the original Plessey Code symbology.
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.Plessey">
            <summary>
                Plessey 1D format.  Plessey Code is a 1D linear barcode symbology based on pulse width modulation, developed in 1971 by The Plessey Company PLC, a British-based company.
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.PDF417">
            <summary>
                PDF417 format.  PDF417 is a stacked linear barcode symbol format used in a variety of applications, primarily transport, identification cards, and inventory management. PDF stands for Portable Data File. The 417 signifies that each pattern in the code consists of 4 bars and spaces, and that each pattern is 17 units long. The PDF417 symbology was invented by Dr. Ynjiun P. Wang at Symbol Technologies in 1991. (Wang 1993) It is ISO standard 15438.
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.Aztec">
            <summary>
                Aztec 2D barcode format.  Aztec Code is a type of 2D barcode invented by Andrew Longacre, Jr. and Robert Hussey in 1995. Named after the resemblance of the central finder pattern to an Aztec pyramid, Aztec code has the potential to use less space than other matrix barcodes because it does not require a surrounding blank "quiet zone".s
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.DataMatrix">
            <summary>
                Data Matrix 2D barcode format. An example of a Data Matrix code, encoding the text: "Wikipedia, the free encyclopedia" A Data Matrix is a two-dimensional barcode consisting of black and white "cells" or modules arranged in either a square or rectangular pattern, also known as a matrix. The information to be encoded can be text or numeric data. Usual data size is from a few bytes up to 1556 bytes.
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.QRCode">
            <summary>
                QR Code 2D barcode format.  QR code (abbreviated from Quick Response Code) is the trademark for a type of matrix barcode (or two-dimensional barcode) first designed in 1994 for the automotive industry in Japan. A barcode is a machine-readable optical label that contains information about the item to which it is attached. A QR code uses four standardized encoding modes (numeric, alphanumeric, byte/binary, and kanji) to efficiently store data; extensions may also be used.
              </summary>
        </member>
        <member name="F:IronBarCode.BarcodeWriterEncoding.Code128GS1">
            Code 128 with GS1 format. Code 128 is a high-density linear barcode symbology defined in ISO/IEC 15417:2007. It is used for alphanumeric or numeric-only barcodes.
        </member>
        <member name="T:IronBarCode.BarCodeAspectSide">
            <summary>
            Chooses the side of barcode to keep aspect size using IronBarCode.
            This enum is related to <see cref="T:IronBarCode.BarCodeAspectSide" /> with the side to keep.
            </summary>
        </member>
        <member name="F:IronBarCode.BarCodeAspectSide.Horizontal">
            <summary>
                Keep width to the default ratio and will stretch height.
            </summary>
        </member>
        <member name="F:IronBarCode.BarCodeAspectSide.Vertical">
            <summary>
                Keep height to the default ratio and will stretch width.
            </summary>
        </member>
        <member name="T:IronBarCode.NamespaceDoc">
            <summary>
            IronBarCode is a .NET library allowing developers to read and generate barcodes.
            IronBarCode supports a wide range of 1 and 2 dimensional barcodes including decorated (branded) QR codes. 
            <para>https://ironsoftware.com/csharp/barcode/</para></summary>
        </member>
        <member name="T:IronBarCode.Installation">
            <summary>
            A directory with write-access where setup and temporary files and will be deployed when necessary.
            </summary>
        </member>
        <member name="P:IronBarCode.Installation.DeploymentPath">
            <summary>
            A directory with write-access where setup and temporary files and will be deployed when necessary. The default location is the system temp folder which is appropriate for most use cases
            </summary>
        </member>
        <member name="T:IronBarCode.License">
            <summary>
             Allows IronBarCode license keys to be applied globally across an 
             application.
             </summary>
        </member>
        <member name="P:IronBarCode.License.IsLicensed">
            <summary>
            Determines whether this instance of IronBarCode is Licensed.
            <para>Will return <c>false</c> unless a <see cref="P:IronBarCode.License.LicenseKey" />
            is set to a valid trial or full license key in 
            <see cref="P:IronBarCode.License.LicenseKey" /> property, <c>Web.Config</c>,
            <c>App.Config</c> or <c>appsettings.json</c> in .Net Core.
            </para><para>
            See https://ironsoftware.com/csharp/barcode/licensing/ and 
            https://ironsoftware.com/csharp/barcode/docs/license/license-keys/
            </para></summary>
            <returns>
                <c>true</c> if the license key given is valid.</returns>
        </member>
        <member name="P:IronBarCode.License.LicenseKey">
            <summary>
            Get Licensed at https://ironsoftware.com/csharp/barcode/licensing/
            <para>
            For .Net framework applications, a license key can alternatively be
            added to <c>Web.Config</c> or <c>App.Config</c> XML file using
            <c>&lt;add key="IronBarCode.LicenseKey" value="IRONBARCODE-LICENSE-KEY"/&gt;</c>
            within the appSettings node.
            See https://ironsoftware.com/csharp/barcode/docs/license/license-keys/
            </para><para>
            For .Net Core applications, a license key  may be added to 
            <c>appsettings.json</c> where the key name is <c>"IronBarCode.LicenseKey"</c>
            and the value is a valid IronBarCode trial or full license key.
            </para><para>
            See https://ironsoftware.com/csharp/barcode/licensing/ for licensing 
            options.
            </para></summary>
        </member>
        <member name="M:IronBarCode.License.IsValidLicense(System.String)">
            <summary>
            Determines whether a string license key is valid.
            <para>
            See https://ironsoftware.com/csharp/barcode/licensing/ for trial,
            development and commercial deployment licensing options.
            </para></summary>
            <param name="licenseKey">IronBarCode license key as a string</param>
            <returns>
                <c>true</c> if the license key given is valid.</returns>
        </member>
        <member name="T:IronBarCode.Logging.Logger">
            <summary>
            Provides functionality for developers to view debug logs and export log files from IronBarCode.
            </summary>
        </member>
        <member name="P:IronBarCode.Logging.Logger.LogFilePath">
            <summary>
            Setting a log path produces ‘log files’ which may be vey useful for debugging in production or providing to Iron Software support when reporting an issue.
            <para>LogFilePath may be set to a directory name or a full file name.</para><para>Setting <c>LogFilePath = null</c> will turn off log files.</para></summary>
            <seealso cref="M:IronBarCode.Logging.Logger.ClearLogFiles" />
        </member>
        <member name="M:IronBarCode.Logging.Logger.ClearLogFiles">
            <summary>
            Removes any Iron Software log files at the <see cref="P:IronBarCode.Logging.Logger.LogFilePath" />.
            </summary>
            <seealso cref="P:IronBarCode.Logging.Logger.LogFilePath" />
        </member>
        <member name="P:IronBarCode.Logging.Logger.LoggingMode">
            <summary>
            Activate or disable detailed developer messages sent to your choice of location in the IDE or application console. 
            </summary>
        </member>
        <member name="P:IronBarCode.Logging.Logger.EnableDebugging">
            <summary>
            Enable or Disable Debugging mode for developer.
            </summary>
        </member>
        <member name="E:IronBarCode.Logging.Logger.MessageLogged">
            <summary>
            Event handler to intercept logged messages.
            </summary>
        </member>
        <member name="T:IronBarCode.Logging.Logger.LoggingModes">
            <summary>
            Different Ways to Log developer notices and warnings
            </summary>
        </member>
        <member name="F:IronBarCode.Logging.Logger.LoggingModes.None">
            <summary>
            Silent
            </summary>
        </member>
        <member name="F:IronBarCode.Logging.Logger.LoggingModes.DebugOutputWindow">
            <summary>
            Sends Messages to System.Diagnostics.Debug
            </summary>
        </member>
        <member name="F:IronBarCode.Logging.Logger.LoggingModes.Console">
            <summary>
            Sends Messages to System.Consoleg
            </summary>
        </member>
        <member name="F:IronBarCode.Logging.Logger.LoggingModes.Custom">
            <summary>
            Attach a custom logger
            </summary>
        </member>
        <member name="F:IronBarCode.Logging.Logger.LoggingModes.File">
            <summary>
            Log to File
            </summary>
        </member>
        <member name="F:IronBarCode.Logging.Logger.LoggingModes.All">
            <summary>
            All available methods
            </summary>
        </member>
        <member name="T:IronBarCode.BarcodeReaderOptions">
            <summary>
            An Options class of <see cref="T:IronBarCode.BarcodeReader" /> for reading many popular barcode formats from Images and PDFs.
            <param>Features: MaxParallelThreads, Reading detail, ExpectMultipleBarcodes, Crop-area, Image filters and preprocessing for improved accuracy.</param></summary>
        </member>
        <member name="M:IronBarCode.BarcodeReaderOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronBarCode.BarcodeReader" /> class.
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.Speed">
            <summary>
            Barcode reading speed. Default Balanced
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.ExpectMultipleBarcodes">
            <summary>
            If set to <c>false</c> the barcode reader will stop scanning a given image once a barcode has been found to increase performance. Default true
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.ExpectBarcodeTypes">
            <summary>
            The barcode encoding types to read from the InputImage.  By default all supported barcodes types are scanned for.  Choosing one or more specific Barcode formats will improve performance significantly.
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.Multithreaded">
            <summary>
            Reads barcodes from multiple images in parallel.  Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks.
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.MaxParallelThreads">
            <summary>
            Max Threads for parallel. Default 4
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.CropArea">
            <summary>
            The area of each image frame in which to scan for barcodes. A <see cref="T:IronSoftware.Drawing.CropRectangle" /> measured in pixels.
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.UseCode39ExtendedMode">
            <summary>
            If a Code39 barcode is detected. Try to use extended mode for the full ASCII Character Set
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.RemoveFalsePositive">
            <summary>
            Attempt to remove false positive barcode reads. This can be disabled to improve performance at the cost of accuracy. Default = True
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeReaderOptions.ImageFilters">
            <summary>
            A collection of image filter for processing Image.
            If a Code39 barcode is detected. Try to use extended mode for the full ASCII Character Set
            </summary>
        </member>
        <member name="T:IronBarCode.BarcodeResult">
            <summary>
            Result from reading a barcode using IronBarCode
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.BarcodeType">
            <summary>
            The <see cref="T:IronBarCode.BarcodeEncoding" /> (barcode type) which was detected
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.Value">
            <summary>
            The value of the barcode as a string.
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.Text">
            <summary>
            The value of the barcode as a string.  Synonym for BarcodeResult.Value
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.BarcodeImage">
            <summary>
            An image of the scanned barcode image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.
            <para>This <see cref="T:IronSoftware.Drawing.AnyBitmap" /> will be disposed when the BarcodeResult finalizes.  If you wish to keep a permanent copy of the <see cref="P:IronBarCode.BarcodeResult.BarcodeImage" /> use the <c>(Bitmap)BarcodeResult.BarcodeImage.Clone()</c> method.</para></summary>
            <value>
            An image of the barcode which was read.  
            </value>
        </member>
        <member name="P:IronBarCode.BarcodeResult.BinaryValue">
            <summary>
            The binary value of the barcode as a byte array.
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.X1">
            <summary>
            A Barcode Location co-ordinate
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.Y1">
            <summary>
            A Barcode Location co-ordinate
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.X2">
            <summary>
            A Barcode Location co-ordinate
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.Y2">
            <summary>
            A Barcode Location co-ordinate
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.Width">
            <summary>
            A Barcode Width
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.Height">
            <summary>
            A Barcode Height
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.PageNumber">
            <summary>
            The page number  of the PDF or Image on which the barcode was discovered. [1 Based e.g. the first page is one not zero]
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.Rotation">
            <summary>
            Orientation of the barcode expressed as a multiple of 90 degrees. Null is orientation not found.
            </summary>
        </member>
        <member name="P:IronBarCode.BarcodeResult.PageOrientation">
            <summary>
            A Page orientation of input image.
            </summary>
        </member>
        <member name="M:IronBarCode.BarcodeResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the value of the barcode as a string;
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:IronBarCode.BarcodeResults">
            <summary>
            Result from reading a barcode as IEnumerable using IronBarCode
            </summary>
        </member>
        <member name="M:IronBarCode.BarcodeResults.Values">
            <summary>
            Return all values of the collection of BarcodeResult.
            </summary>
        </member>
        <member name="M:IronBarCode.BarcodeResults.FilterImages">
            <summary>
            Return all images that applies the filter.
            </summary>
        </member>
        <member name="M:IronBarCode.BarcodeResults.ExportFilterImagesToDisk(System.String)">
            <summary>
            Export the processed image from a collection of ImageFilter to the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file to which to save this Image.</param>
        </member>
        <member name="M:IronBarCode.BarcodeResults.GetEnumerator">
            <summary>
            Return an enumerator that iterates through the collection of BarcodeResult
            </summary>
        </member>
        <member name="T:IronBarCode.PdfBarcodeReaderOptions">
            <summary>
            An Options class of <see cref="T:IronBarCode.PdfBarcodeReaderOptions" /> for reading many popular barcode formats from PDFs.
            <param>Features: MaxParallelThreads, Reading detail, ExpectMultipleBarcodes, Crop-area, Image filters and preprocessing for improved accuracy.</param></summary>
        </member>
        <member name="M:IronBarCode.PdfBarcodeReaderOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronBarCode.PdfBarcodeReaderOptions" /> class.
            </summary>
        </member>
        <member name="M:IronBarCode.PdfBarcodeReaderOptions.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IronBarCode.PdfBarcodeReaderOptions" /> class with the specified page.
            </summary>
            <param name="PageNumber">The page number of the PDF.</param>
        </member>
        <member name="M:IronBarCode.PdfBarcodeReaderOptions.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:IronBarCode.PdfBarcodeReaderOptions" /> class with the specified pages.
            </summary>
            <param name="PageNumbers">The page numbers of the PDF.</param>
        </member>
        <member name="P:IronBarCode.PdfBarcodeReaderOptions.Password">
            <summary>
            The password string to open / unencrypt the PDF. Null or "" assign no password.
            </summary>
        </member>
        <member name="P:IronBarCode.PdfBarcodeReaderOptions.PageNumbers">
            <summary>
            The page numbers of the PDF to read expressed as an Array, List or IEnumerable of <see cref="T:System.Int32" />. PageNumbers are '1 based' meaning that the first page number is 1 rather than zero.
            </summary>
        </member>
        <member name="P:IronBarCode.PdfBarcodeReaderOptions.DPI">
            <summary>
            The Dots per inch to rendering each Barcode images.
            </summary>
        </member>
        <member name="P:IronBarCode.PdfBarcodeReaderOptions.Scale">
            <summary>
            The Scale Factor for Scaling Width and Height when convert Pdf to Image. Default 3.5.
            </summary>
        </member>
        <member name="T:IronBarCode.QRCodeLogo">
            <summary>
            A class allowing for advanced control on the logo of QR type barcodes.
            <para><see cref="T:IronBarCode.QRCodeLogo">QRCodeLogo</see> gives the developer access to set logo image, logo width, logo height, and rounded logo corner.</para><para>Logo image can be provide as <see cref="T:IronSoftware.Drawing.AnyBitmap" />, Files, Array of <see cref="T:System.Byte" /> and <see cref="T:System.IO.Stream" />.</para></summary>
        </member>
        <member name="P:IronBarCode.QRCodeLogo.LogoWidth">
            <summary>
            Desired width of Logo in px. If zero (default) IronBarcode will automatically maximize the size of your logo for you.
            </summary>
        </member>
        <member name="P:IronBarCode.QRCodeLogo.LogoHeight">
            <summary>
            Desired height of Logo in px. If zero (default) IronBarcode will automatically maximize the size of your logo for you.
            </summary>
        </member>
        <member name="P:IronBarCode.QRCodeLogo.RoundedCornerRadius">
            <summary>
            Desired rounding of Logo corners for design purposes. If zero (default) IronBarcode not round the corners of your logo.
            </summary>
        </member>
        <member name="P:IronBarCode.QRCodeLogo.Logo">
            <summary>
            Image Logo to stamp onto a QR code as a <see cref="T:IronSoftware.Drawing.AnyBitmap" /></summary>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(IronSoftware.Drawing.AnyBitmap,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="LogoImage">The logo image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Size">The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(IronSoftware.Drawing.AnyBitmap,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="LogoImage">The logo image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Width">The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="Height">The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.IO.Stream,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="Stream">The logo image as a <see cref="T:IronSoftware.Drawing.AnyBitmap" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Size">The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code.  File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="Stream">The logo image as a <see cref="T:System.IO.Stream" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Width">The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="Height">The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.Byte[],System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="Bytes">The logo image as a array of <see cref="T:System.Byte" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Size">The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.Byte[],System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="Bytes">The logo image as a array of <see cref="T:System.Byte" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Width">The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="Height">The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.String,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="filepath">The logo image as a full or relative filepath. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Size">The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="filepath">The logo image as a full or relative filepath. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Width">The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="Height">The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.Uri,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="URI">The logo image as a <see cref="T:System.Uri" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Size">The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="M:IronBarCode.QRCodeLogo.#ctor(System.Uri,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.
            </summary>
            <param name="URI">The logo image as a <see cref="T:System.Uri" />. Jpeg, Jpeg2000, Png, Bmp, Tiff &amp; Gif Image formats are supported.</param>
            <param name="Width">The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="Height">The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size.</param>
            <param name="RoundedCornerRadius">The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners.</param>
        </member>
        <member name="T:IronBarCode.PagedBarcodeResult">
            <summary>
            Results from reading a barcode from a multi-page document using IronBarCode
            </summary>
            <seealso cref="T:IronBarCode.BarcodeResult" />
        </member>
    </members>
</doc>